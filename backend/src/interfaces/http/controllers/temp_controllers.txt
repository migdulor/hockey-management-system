import { Request, Response } from 'express';
import { AttendanceService } from '../../../core/services/AttendanceService.js';

export class AttendanceController {
  constructor(private attendanceService: AttendanceService) {}

  async create(req: Request, res: Response) {
    try {
      const attendance = await this.attendanceService.createAttendance(req.body);
      res.status(201).json(attendance);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async getById(req: Request, res: Response) {
    try {
      const attendance = await this.attendanceService.getAttendance(req.params.id);
      if (!attendance) return res.status(404).json({ error: 'Attendance not found' });
      res.json(attendance);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async getAll(req: Request, res: Response) {
    try {
      const attendances = await this.attendanceService.getAttendances(req.query);
      res.json(attendances);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async update(req: Request, res: Response) {
    try {
      const attendance = await this.attendanceService.updateAttendance(req.params.id, req.body);
      res.json(attendance);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async delete(req: Request, res: Response) {
    try {
      await this.attendanceService.deleteAttendance(req.params.id);
      res.status(204).send();
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }
}
import { Request, Response } from 'express';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'supersecret';

export class AuthController {
  async login(req: Request, res: Response) {
    const { email, password } = req.body;
    // TODO: Replace with real user lookup and password check
    if (email === 'migdulor@hotmail.com' && password === 'admin123') {
      const token = jwt.sign({ email, role: 'admin' }, JWT_SECRET, { expiresIn: '8h' });
      return res.json({ token });
    }
    // TODO: Add trainer login logic
    return res.status(401).json({ error: 'Invalid credentials' });
  }

  async logout(req: Request, res: Response) {
    // For JWT, logout is handled client-side by deleting the token
    res.status(200).json({ message: 'Logged out' });
  }
}
import { Request, Response } from 'express';
import { FormationService } from '../../../core/services/FormationService.js';

export class FormationController {
  constructor(private formationService: FormationService) {}

  async create(req: Request, res: Response) {
    try {
      const formation = await this.formationService.createFormation(req.body);
      res.status(201).json(formation);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async getById(req: Request, res: Response) {
    try {
      const formation = await this.formationService.getFormation(req.params.id);
      if (!formation) return res.status(404).json({ error: 'Formation not found' });
      res.json(formation);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async getAll(req: Request, res: Response) {
    try {
      const formations = await this.formationService.getFormations(req.query);
      res.json(formations);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async update(req: Request, res: Response) {
    try {
      const formation = await this.formationService.updateFormation(req.params.id, req.body);
      res.json(formation);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async delete(req: Request, res: Response) {
    try {
      await this.formationService.deleteFormation(req.params.id);
      res.status(204).send();
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }
}
import { Request, Response } from 'express';
import { MatchService } from '../../../core/services/MatchService.js';

export class MatchController {
  constructor(private matchService: MatchService) {}

  async create(req: Request, res: Response) {
    try {
      const match = await this.matchService.createMatch(req.body);
      res.status(201).json(match);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async getById(req: Request, res: Response) {
    try {
      const match = await this.matchService.getMatch(req.params.id);
      if (!match) return res.status(404).json({ error: 'Match not found' });
      res.json(match);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async getAll(req: Request, res: Response) {
    try {
      const matches = await this.matchService.getMatches(req.query);
      res.json(matches);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async update(req: Request, res: Response) {
    try {
      const match = await this.matchService.updateMatch(req.params.id, req.body);
      res.json(match);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async delete(req: Request, res: Response) {
    try {
      await this.matchService.deleteMatch(req.params.id);
      res.status(204).send();
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }
}
import { Request, Response } from 'express';
import { MLService } from '../../../core/services/MLService.js';

export class MLController {
  constructor(private service: MLService) {}

  async predict(req: Request, res: Response) {
    const prediction = await this.service.predict(req.body.input);
    res.json(prediction);
  }

  async getById(req: Request, res: Response) {
    const prediction = await this.service.getById(req.params.id);
    res.json(prediction);
  }

  async getAll(req: Request, res: Response) {
    const predictions = await this.service.getAll();
    res.json(predictions);
  }
}
import { Request, Response } from 'express';
import { PaymentService } from '../../../core/services/PaymentService.js';

export class PaymentController {
  constructor(private service: PaymentService) {}

  async create(req: Request, res: Response) {
    const payment = await this.service.create(req.body);
    res.json(payment);
  }

  async getById(req: Request, res: Response) {
    const payment = await this.service.getById(req.params.id);
    res.json(payment);
  }

  async getAll(req: Request, res: Response) {
    const payments = await this.service.getAll();
    res.json(payments);
  }
}
import { Request, Response } from 'express';
import { PlayerService } from '../../../core/services/PlayerService.js';

const getErrorMessage = (err: unknown): string => {
  return err instanceof Error ? err instanceof Error ? err.message : "Error desconocido" : 'Error desconocido';
};

export class PlayerController {
  constructor(private playerService: PlayerService) {}

  async create(req: Request, res: Response) {
    try {
      const player = await this.playerService.createPlayer(req.body);
      res.status(201).json(player);
    } catch (err) {
      const errorMessage = err instanceof Error ? err instanceof Error ? err.message : "Error desconocido" : 'Error desconocido';
      res.status(400).json({ error: errorMessage });
    }
  }

  async getById(req: Request, res: Response) {
    try {
      const player = await this.playerService.getPlayer(req.params.id);
      if (!player) return res.status(404).json({ error: 'Player not found' });
      res.json(player);
    } catch (err) {
      res.status(400).json({ error: getErrorMessage(err) });
    }
  }

  async getAll(req: Request, res: Response) {
    try {
      const players = await this.playerService.getPlayers(req.query);
      res.json(players);
    } catch (err) {
      res.status(400).json({ error: getErrorMessage(err) });
    }
  }

  async update(req: Request, res: Response) {
    try {
      const player = await this.playerService.updatePlayer(req.params.id, req.body);
      res.json(player);
    } catch (err) {
      res.status(400).json({ error: getErrorMessage(err) });
    }
  }

  async delete(req: Request, res: Response) {
    try {
      await this.playerService.deletePlayer(req.params.id);
      res.status(204).send();
    } catch (err) {
      res.status(400).json({ error: getErrorMessage(err) });
    }
  }
}
import { Request, Response } from 'express';
import { ReportService } from '../../../core/services/ReportService.js';

export class ReportController {
  constructor(private service: ReportService) {}

  async create(req: Request, res: Response) {
    const report = await this.service.create(req.body);
    res.json(report);
  }

  async getById(req: Request, res: Response) {
    const report = await this.service.getById(req.params.id);
    res.json(report);
  }

  async getAll(req: Request, res: Response) {
    const reports = await this.service.getAll();
    res.json(reports);
  }
}
import { Request, Response } from 'express';
import { StatisticService } from '../../../core/services/StatisticService.js';

export class StatisticController {
  constructor(private service: StatisticService) {}

  async create(req: Request, res: Response) {
    const stat = await this.service.create(req.body);
    res.json(stat);
  }

  async getById(req: Request, res: Response) {
    const stat = await this.service.getById(req.params.id);
    res.json(stat);
  }

  async getAll(req: Request, res: Response) {
    const stats = await this.service.getAll();
    res.json(stats);
  }
}
import { Request, Response } from 'express';
import { TeamService } from '../../../core/services/TeamService.js';

const getErrorMessage = (err: unknown): string => {
  return err instanceof Error ? err instanceof Error ? err.message : "Error desconocido" : 'Error desconocido';
};

export class TeamController {
  constructor(private teamService: TeamService) {}

  async create(req: Request, res: Response) {
    try {
      const team = await this.teamService.createTeam(req.body);
      res.status(201).json(team);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async getById(req: Request, res: Response) {
    try {
      const team = await this.teamService.getTeam(req.params.id);
      if (!team) return res.status(404).json({ error: 'Team not found' });
      res.json(team);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async getAll(req: Request, res: Response) {
    try {
      const teams = await this.teamService.getTeams(req.query);
      res.json(teams);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async update(req: Request, res: Response) {
    try {
      const team = await this.teamService.updateTeam(req.params.id, req.body);
      res.json(team);
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }

  async delete(req: Request, res: Response) {
    try {
      await this.teamService.deleteTeam(req.params.id);
      res.status(204).send();
    } catch (err) {
      res.status(400).json({ error: err instanceof Error ? err.message : "Error desconocido" });
    }
  }
}
import { Request, Response } from 'express';
import { WhatsAppService } from '../../../core/services/WhatsAppService.js';

export class WhatsAppController {
  constructor(private service: WhatsAppService) {}

  async send(req: Request, res: Response) {
    const msg = await this.service.send(req.body);
    res.json(msg);
  }

  async getById(req: Request, res: Response) {
    const msg = await this.service.getById(req.params.id);
    res.json(msg);
  }

  async getAll(req: Request, res: Response) {
    const msgs = await this.service.getAll();
    res.json(msgs);
  }
}

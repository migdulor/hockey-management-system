// Test completo para la API de formaciones
const API_BASE_URL = 'http://localhost:3001/api';

// Funci√≥n auxiliar para hacer peticiones HTTP
async function makeRequest(url, options = {}) {
  const fetch = (await import('node-fetch')).default;
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    return { success: true, data, status: response.status };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

// Test 1: Health check
async function testHealthCheck() {
  console.log('üîç Test 1: Health Check');
  const result = await makeRequest('http://localhost:3001/health');
  
  if (result.success) {
    console.log('‚úÖ Health check OK:', result.data);
  } else {
    console.log('‚ùå Health check fall√≥:', result.error);
  }
  console.log('');
}

// Test 2: Obtener todas las formaciones (inicialmente vac√≠o)
async function testGetAllFormations() {
  console.log('üîç Test 2: Obtener todas las formaciones');
  const result = await makeRequest(`${API_BASE_URL}/formations`);
  
  if (result.success) {
    console.log('‚úÖ GET /formations OK:', result.data.length, 'formaciones encontradas');
    console.log('Datos:', result.data);
  } else {
    console.log('‚ùå GET /formations fall√≥:', result.error);
  }
  console.log('');
}

// Test 3: Crear una nueva formaci√≥n
async function testCreateFormation() {
  console.log('üîç Test 3: Crear nueva formaci√≥n');
  
  const newFormation = {
    name: 'Formaci√≥n 4-3-3 Ofensiva',
    description: 'Formaci√≥n ofensiva con extremos r√°pidos',
    formation_type: '4-3-3',
    team_id: 1,
    is_template: true
  };
  
  const result = await makeRequest(`${API_BASE_URL}/formations`, {
    method: 'POST',
    body: JSON.stringify(newFormation)
  });
  
  if (result.success) {
    console.log('‚úÖ POST /formations OK - ID:', result.data.id);
    console.log('Formaci√≥n creada:', result.data);
    return result.data.id; // Retornamos el ID para usar en otros tests
  } else {
    console.log('‚ùå POST /formations fall√≥:', result.error);
    return null;
  }
}

// Test 4: Obtener una formaci√≥n por ID
async function testGetFormationById(formationId) {
  if (!formationId) {
    console.log('‚è≠Ô∏è Test 4: Saltado - no hay ID de formaci√≥n');
    return;
  }
  
  console.log('üîç Test 4: Obtener formaci√≥n por ID');
  const result = await makeRequest(`${API_BASE_URL}/formations/${formationId}`);
  
  if (result.success) {
    console.log('‚úÖ GET /formations/:id OK');
    console.log('Formaci√≥n:', result.data);
  } else {
    console.log('‚ùå GET /formations/:id fall√≥:', result.error);
  }
  console.log('');
}

// Test 5: Actualizar una formaci√≥n
async function testUpdateFormation(formationId) {
  if (!formationId) {
    console.log('‚è≠Ô∏è Test 5: Saltado - no hay ID de formaci√≥n');
    return;
  }
  
  console.log('üîç Test 5: Actualizar formaci√≥n');
  
  const updatedData = {
    name: 'Formaci√≥n 4-3-3 Defensiva ACTUALIZADA',
    description: 'Formaci√≥n defensiva modificada',
    formation_type: '4-3-3'
  };
  
  const result = await makeRequest(`${API_BASE_URL}/formations/${formationId}`, {
    method: 'PUT',
    body: JSON.stringify(updatedData)
  });
  
  if (result.success) {
    console.log('‚úÖ PUT /formations/:id OK');
    console.log('Formaci√≥n actualizada:', result.data);
  } else {
    console.log('‚ùå PUT /formations/:id fall√≥:', result.error);
  }
  console.log('');
}

// Test 6: Obtener posiciones de una formaci√≥n
async function testGetFormationPositions(formationId) {
  if (!formationId) {
    console.log('‚è≠Ô∏è Test 6: Saltado - no hay ID de formaci√≥n');
    return;
  }
  
  console.log('üîç Test 6: Obtener posiciones de formaci√≥n');
  const result = await makeRequest(`${API_BASE_URL}/formations/${formationId}/positions`);
  
  if (result.success) {
    console.log('‚úÖ GET /formations/:id/positions OK');
    console.log('Posiciones:', result.data.length, 'encontradas');
    console.log('Datos:', result.data);
  } else {
    console.log('‚ùå GET /formations/:id/positions fall√≥:', result.error);
  }
  console.log('');
}

// Test 7: Agregar una posici√≥n a la formaci√≥n
async function testAddPosition(formationId) {
  if (!formationId) {
    console.log('‚è≠Ô∏è Test 7: Saltado - no hay ID de formaci√≥n');
    return;
  }
  
  console.log('üîç Test 7: Agregar posici√≥n a formaci√≥n');
  
  const newPosition = {
    position: 'GK',
    player_id: 1,
    x_coordinate: 50,
    y_coordinate: 90,
    is_starter: true
  };
  
  const result = await makeRequest(`${API_BASE_URL}/formations/${formationId}/positions`, {
    method: 'POST',
    body: JSON.stringify(newPosition)
  });
  
  if (result.success) {
    console.log('‚úÖ POST /formations/:id/positions OK');
    console.log('Posici√≥n agregada:', result.data);
    return result.data.id;
  } else {
    console.log('‚ùå POST /formations/:id/positions fall√≥:', result.error);
    return null;
  }
}

// Test 8: Obtener detalles completos de la formaci√≥n
async function testGetFormationDetails(formationId) {
  if (!formationId) {
    console.log('‚è≠Ô∏è Test 8: Saltado - no hay ID de formaci√≥n');
    return;
  }
  
  console.log('üîç Test 8: Obtener detalles completos de formaci√≥n');
  const result = await makeRequest(`${API_BASE_URL}/formations/${formationId}/details`);
  
  if (result.success) {
    console.log('‚úÖ GET /formations/:id/details OK');
    console.log('Detalles completos:', result.data);
  } else {
    console.log('‚ùå GET /formations/:id/details fall√≥:', result.error);
  }
  console.log('');
}

// Test 9: Eliminar la formaci√≥n (al final)
async function testDeleteFormation(formationId) {
  if (!formationId) {
    console.log('‚è≠Ô∏è Test 9: Saltado - no hay ID de formaci√≥n');
    return;
  }
  
  console.log('üîç Test 9: Eliminar formaci√≥n');
  const result = await makeRequest(`${API_BASE_URL}/formations/${formationId}`, {
    method: 'DELETE'
  });
  
  if (result.success) {
    console.log('‚úÖ DELETE /formations/:id OK');
    console.log('Resultado:', result.data);
  } else {
    console.log('‚ùå DELETE /formations/:id fall√≥:', result.error);
  }
  console.log('');
}

// Ejecutar todos los tests
async function runAllTests() {
  console.log('üöÄ INICIANDO TESTS COMPLETOS DE LA API DE FORMACIONES');
  console.log('='.repeat(60));
  console.log('');
  
  await testHealthCheck();
  await testGetAllFormations();
  
  const formationId = await testCreateFormation();
  console.log('');
  
  await testGetFormationById(formationId);
  await testUpdateFormation(formationId);
  await testGetFormationPositions(formationId);
  
  const positionId = await testAddPosition(formationId);
  console.log('');
  
  await testGetFormationDetails(formationId);
  await testDeleteFormation(formationId);
  
  console.log('üéâ TESTS COMPLETADOS');
  console.log('='.repeat(60));
}

// Verificar que el servidor est√© corriendo antes de ejecutar tests
async function checkServerAndRunTests() {
  console.log('üîç Verificando que el servidor est√© corriendo...');
  const serverCheck = await makeRequest('http://localhost:3001/health');
  
  if (!serverCheck.success) {
    console.log('‚ùå El servidor no est√° corriendo en puerto 3001');
    console.log('Por favor inicia el servidor con: node src/server-mock.js');
    return;
  }
  
  console.log('‚úÖ Servidor detectado, iniciando tests...');
  console.log('');
  await runAllTests();
}

// Ejecutar
checkServerAndRunTests().catch(console.error);
